/*
 * ======== Standard MSP430 includes ========
 */
#include <msp430.h>

/*
 * ======== Grace related includes ========
 */
#include <ti/mcu/msp430/Grace.h>




int findaverage(int outavg[150], unsigned int H);
/*
 *  ======== main ========
 */
int main(void)
{
    Grace_init();   // Activate Grace-generated configuration

    
    	unsigned int k;   //declare unsigned integers
   // 	unsigned int B =0;//
    	//int PS_offCnt=0;
    //	unsigned int underPeakTest = 0;
	//	unsigned int underPeakCounter = 0;
	//	unsigned int underPeakDetect = 0;
	//	unsigned int underPeakTestdiv = 0;
		//unsigned int peakDetectDelay = 0;
    //	unsigned int adcsample = 149;
    	int filtered=0; // Declare integers
  		unsigned int peak10 = 0;
  	//	unsigned int samplesum;
  		int Adata=0;
  		int CenterTap=0;
  		int Adata1=0;
  		int CenterTap1=0;
  		int filtered1=0;


  	//	int outarr[150]; // Declare Arrays

  		int RegX1[4],RegX2[4],RegY1[4],RegY2[4];

  		const float a1[]={-1.169925255,-1.402167657,-1.120723799,-1.649948614};
  		const float a2[]={0.6360640657,0.6962444294,0.8186383078,0.8846651141}; //Set the Digital filter coefficients
  		const float b0[]={-0.173675154,-0.1901072,-0.1910775392,-0.2064887892};
  		const float b2[]={0.173675154,0.1901072,0.1910775392,0.2064887892};

  		int RegX11 =0;
  		int RegY11 = 0;

  		const float a11 =  -0.678222413648525757;
  		//const float a21 = 0; //Set the Digital filter coefficients
  		const float b01 = 0.160888793175737121;
  		const float b11 = 0.160888793175737121;



  		for (k=0; k>3; ++k)

  			{
  			RegX1[k]=0;
  			RegX2[k]=0;				//Clear the Digital filter multiply\accumulate registers
  			RegY1[k]=0;
  			RegY2[k]=0;
  			}



  	//P1OUT &= 0;
  	//P1OUT |=BIT0; // turn on the LED/also used to as a flag to debounce the on off switch
  //	TA1CTL &=~BIT4;


  				//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  	//while(P1OUT && BIT0 == BIT0)

 // 	{

  //	TA1CTL |= BIT4; //Start Timer//wait for the on\off button to be released

  //	if (!(P2IN & BIT1))

  //	{

  	//	TA1CCR0 += 600;

  //	}

  //	}

 // 	P2OUT |= BIT2;//latch the power supply on
  //	TA1CCR0 = 600;

  	while(1) // endless loop

  	{

  		P1OUT &= ~BIT1;

  		if (P2OUT && BIT4 == BIT4) // check to see if P2OUT is equal to 00001000 and excute code if true.
  								   // Wait for timer to finish, then begin processing next data point.
  								   // A Timer is Set at 1000hz intervals and is used to set the sample rate of the ADC. P2OUT bit 4 is set by the timer.


  		{

  			P2OUT &= ~BIT4; //turn off bit 4 - timer will reset to high state and then the next sample can be processed.
  			P1OUT |= BIT1;
  			ADC10CTL0 |= ENC + ADC10SC; //Start ADC



  						 /* Loop until ADC10IFG is set indicating ADC conversion complete */
  						 while ((ADC10CTL0 & ADC10IFG) == 0);
  						 Adata = ADC10MEM;



  						 for(k=0; k<3; k++) /* 3 + 0 is the number of sections - stop when 4 is reached*/

  						 {

  						 CenterTap = ((Adata * b0[k]) + (b2[k] * RegX2[k]));
  						 filtered = (CenterTap - (a1[k] * RegY1[k]) - (a2[k] * RegY2[k]));

  						 	   RegX2[k] = RegX1[k];
  						 	   RegX1[k] = Adata;
  						 	   RegY2[k] = RegY1[k];
  						 	   RegY1[k] = filtered;
  						 	   Adata = filtered;
  						 }





  		if (filtered < 0)

  			{

  			filtered *= -1;

  			}

  		 CenterTap1 = ((filtered * b01) + (b11 * RegX11));
  		 filtered1 = (CenterTap1 - (a11 * RegY11));

  		  		 //RegX2[k] = RegX1[k];
  		  		 RegX11 = filtered;
  		  		// RegY2[k] = RegY1[k];
  		  		 RegY11 = filtered1;
  		  		 peak10 = filtered1;





  			if (peak10 < 5)

  			{
				 peak10 = 5;

  			}

  			peak10 *= 3;



		//	if (B > adcsample) //Check to see if a 150 samples have been gathered


		//	{

				//TA0CTL &= ~BIT4; //Stop sampling and processing audio data through digital filter.
			  	//peak10 = findaverage(outarr, B); //find the average of the peaks of the data and multiple by 2
			//	B=0; // Set B to zero to begin gathering a new set of data points

		//	}
				/*
				if (!(P2IN & BIT1))

				{

		 	PS_offCnt += 1;

		}

				else

				{

				PS_offCnt = 0;

				}

				if (PS_offCnt > 3 )

				{

					while(1)


				{
					P2OUT &= ~BIT2;

				}

				}

			}


 */
			//filtered *= adcsample;

			if (filtered > peak10) //Check to see if the if there is a filtered data point is higher then the average of the peaks of the last 150 samples of filtered data

				 {

				P1OUT |= (BIT0 + BIT2);  // Turn on LED
				TA1CTL |= BIT4; //Start Timer

				//P2OUT &= ~BIT4; //turn off bit 4 - timer will reset to high state and then the next sample can be processed.


  /*
				if (underPeakTest < filtered)

				{
				underPeakTest = filtered;
				underPeakTestdiv = underPeakTest/2;
				underPeakCounter = 10;
				underPeakDetect = 1;

				}

				 }



			if (underPeakDetect == 1)

			{
			//	peakDetectDelay++;


		//	if (peakDetectDelay == 8)

		//		{

				if ( filtered < underPeakTestdiv)

				{

				underPeakCounter++;

				}

				else

				{

		//			peakDetectDelay = 0;
					underPeakCounter--;

				}


			if (underPeakCounter > 100)

				{

				P1OUT |= (BIT0 + BIT2);  // Turn on LED
				TA1CTL |= BIT4; //Start Timer
				underPeakDetect = 0;
				//peakDetectDelay = 0;
				underPeakTest = 0;


				}

			if (underPeakCounter < 8)

			{

			underPeakDetect = 0;
			underPeakTest = 0;

			}

   */

  	}



}

}

}
/*

	int findaverage(int outavg[], unsigned int H)


		{


		unsigned int X=0; //declare unsigned integers
		unsigned int D = 0;
		unsigned int M = 0;

		int peak= 0;
		int peakavg = 0;//declare integers



			for (X= 0; X < H; ) //run loop for number of samples points-->149

		  	{

				peak = 0; //set peak to zero

//-------------------------------------------------------------------------------------------------------------------------------
	//Find highest point out of every 6 data points for the total number of samples and average them.

				for (M=0;M<6;++M)

		  	    	 {

						if (outavg[X] > 0)
						{
		  	    		  if (outavg[X]> peak)
		  	    		  {
		  	    		    peak = outavg[X];
		  	    		  }
		  	    		}

						++X;
		  	    	 }

			 	 	 peakavg += peak;

			 	 	 ++D;

		  	 }

	peakavg /= D;


//-----------------------------------------------------------------------------------------------------------------------

		  	  if (peakavg < 5) //Min Peak average is 15

		  	  {
		  	  	peakavg = 5;
		  	  }


		  	  peakavg *= 2.5;



		  	TA0CTL |= BIT4; // Turn timer A0 back on and begin ADC and digial filter processing.
		  	return (peakavg);


}
*/

